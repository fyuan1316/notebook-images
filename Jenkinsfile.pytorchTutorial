pipeline{
    agent {
        label 'aml'
    }
    parameters {
		string(name: 'TARGET', defaultValue: 'pytorchTutorial', description: 'Image build target e.g. baseNotebook')
		string(name: 'ORIGINAL_IMAGE', defaultValue: 'index.alauda.cn/alaudaorg/scipy-notebook:10.0-cudnn7-runtime', description: '构建的父镜像')
        string(name: 'PYTORCH_VERSION', defaultValue: '1.1.0', description: '')
        string(name: 'REGISTRY', defaultValue: 'index.alauda.cn', description: '')
		string(name: 'OWNER', defaultValue: 'alaudaorg', description: '')
	}
    environment {
		BUILDSH = ''
        PUSHSH = ''
        CREDENTIALID =''
    }

    stages{
        stage('prepare'){
            steps{
                library identifier: 'genimage-sharelib@master', retriever: modernSCM(
                [$class: 'GitSCMSource',
                remote: 'https://github.com/fyuan1316/gen-image-sharelib.git',
                credentialsId: ''])
                container('tools') {
                    script{
                        echo "pre"
                        def cfg = readYaml file: 'config.yaml' 
                        def pmap = [:]
                        cfg[params.TARGET].params.each { p->
                            def name = params."${p}"
                            pmap.put(p,name)
                        }
                        println('pmap')
                        pmap.each{
                            println "${it.key}:${it.value}"
                        }
                        def map=[
                            'script':cfg[params.TARGET].script,
                            'push':cfg[params.TARGET].push,
                            'params':pmap,
                            ]
                        BUILDSH = img.genBuildSh(map)
                        // println "${env.BUILDSH}"
                        println "${BUILDSH}"
                        PUSHSH = img.genPushSh(map)
                        // println "${env.PUSHSH}"
                        println "${PUSHSH}"
                        CREDENTIALID = cfg[params.TARGET].pushCredentialId
                    }
                }
            }
        }
        stage('gen-images'){
            steps{
                container('tools') { 
                    script{
                        echo "gen images"
                        retry(3) {
                            println "${BUILDSH}"
                            sh "${BUILDSH}"
                        }
                    }
                }
            }
        }
        stage('push-images'){
            steps{
                container('tools') { 
                    script{
                        echo "push images"
                        retry(3) {
                            if ("${CREDENTIALID}" != '') {
                                withCredentials([usernamePassword(credentialsId: "${CREDENTIALID}", passwordVariable: 'PASSWD', usernameVariable: 'USER')]) {
                                    sh "docker login ${params.REGISTRY}/${params.OWNER} -u ${USER} -p ${PASSWD}"
                                }
                            }
                            println "${PUSHSH}"
                            sh "${PUSHSH}"
                        }
                    }
                }
            }
        }
    }
}